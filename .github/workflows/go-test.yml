name: Go Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        cache: true
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config gcc g++ make

    - name: Build
      run: go build -v -ldflags="-s -w -X main.Version=test" ./...

    - name: Run Tests
      run: go test -v ./...
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        cache: true
      
    - name: Lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v2.1.6
        args: --timeout=5m --path-mode=abs
  
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config gcc g++ make

    - name: Generate coverage report
      run: go test -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }} 