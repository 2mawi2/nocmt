name: Release

on:
  push:
    branches:
      - 'release'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even when not on release branch'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config gcc-multilib g++-multilib make

      - name: Extract current version
        id: version
        run: |
          # Extract current version from the code
          # You may need to adjust this to extract from your version file/constant
          CURRENT_VERSION=$(grep -oP 'const Version = "\K[^"]+' main.go || echo "0.0.1")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Build for multiple platforms
        run: |
          mkdir -p artifacts
          VERSION=${{ steps.version.outputs.version }}
          
          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -o artifacts/nocmt-linux-amd64 -ldflags="-s -w -X main.Version=$VERSION" .
          
          # MacOS amd64
          GOOS=darwin GOARCH=amd64 go build -o artifacts/nocmt-darwin-amd64 -ldflags="-s -w -X main.Version=$VERSION" .
          
          # MacOS arm64
          GOOS=darwin GOARCH=arm64 go build -o artifacts/nocmt-darwin-arm64 -ldflags="-s -w -X main.Version=$VERSION" .
          
          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -o artifacts/nocmt-windows-amd64.exe -ldflags="-s -w -X main.Version=$VERSION" .
          
          # Create checksums
          cd artifacts
          sha256sum * > checksums.txt
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*
            LICENSE

  update-homebrew:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew tap repository
        uses: actions/checkout@v4
        with:
          repository: 2mawi2/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap
          
      - name: Download release tarball and calculate SHA
        run: |
          curl -L https://github.com/2mawi2/nocmt/archive/refs/tags/${{ needs.build.outputs.tag }}.tar.gz -o nocmt.tar.gz
          SHA256=$(sha256sum nocmt.tar.gz | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          
      - name: Update formula
        run: |
          cat > homebrew-tap/Formula/nocmt.rb << EOL
          class Nocmt < Formula
            desc "Tool for removing comments from source code while preserving structure"
            homepage "https://github.com/2mawi2/nocmt"
            url "https://github.com/2mawi2/nocmt/archive/refs/tags/${{ needs.build.outputs.tag }}.tar.gz"
            sha256 "${SHA256}"
            license "MIT"
          
            depends_on "go" => :build
          
            def install
              # Build from source
              system "go", "build", *std_go_args(ldflags: "-s -w -X main.Version=${{ needs.build.outputs.version }}")
            end
          
            test do
              assert_match "nocmt version", shell_output("#{bin}/nocmt --version")
            end
          end
          EOL
          
      - name: Commit and push updated formula
        run: |
          cd homebrew-tap
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          git add Formula/nocmt.rb
          git commit -m "Update nocmt to ${{ needs.build.outputs.version }}"
          git push

  increment-version:
    needs: [build, update-homebrew]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' || github.event.inputs.force_release == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
      
      - name: Increment Version
        run: |
          # Get current version from the output
          CURRENT_VERSION=${{ needs.build.outputs.version }}
          
          # Parse the version
          IFS='.' read -ra VER_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VER_PARTS[0]}
          MINOR=${VER_PARTS[1]}
          PATCH=$((${VER_PARTS[2]}+1))
          
          # Create new version
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          
          # Update version in main.go (adjust file path as needed)
          sed -i "s/const Version = \"$CURRENT_VERSION\"/const Version = \"$NEW_VERSION\"/" main.go
          
          # Create a branch for the version bump
          git checkout -b version-bump-$NEW_VERSION
          git add main.go
          git commit -m "Bump version to $NEW_VERSION"
          git push origin version-bump-$NEW_VERSION
          
          # Create a pull request
          gh pr create --base main --head version-bump-$NEW_VERSION \
            --title "Bump version to $NEW_VERSION" \
            --body "Automated version bump after release $CURRENT_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 